use dispotrains
var mapStationsToLines = function() {
    var lines = this.lines;
    delete this["lines"];
    delete this["_id"];
    this["status"] = true;
    this["update"] = null;
    var toTitleCase = function(str) {
        return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
    }
    if (this.name != "GARE DU NORD" && this.name != "GARE DE LYON") {
        this.name = this.name.replace(/GARE DE /, "");
        this.name = this.name.replace(/GARE DU /, "");
    }

    this.name = toTitleCase(this.name);

    for (var i = 0; i < this.elevators.length; i++) {
        var elevator = this.elevators[i];
        var status = elevator.status;
        if (this["update"] != null && status.lastupdate > this["update"]) {
            this["update"] = status.lastupdate;
        } else {
            this["update"] = status.lastupdate;
        }
        if (status.state == "Disponible") {
            continue;
        } else {
            this["status"] = false;
            break;
        }
    }
    delete this["elevators"];

    for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        delete line["_id"];
        line.update = this.update;
        line.goodStations = [];
        line.badStations = [];
        if (this.status) {
            line.goodStations = [this];
        } else {
            line.badStations = [this];
        }
        emit(line.id, line);
    }
};

var reduceLines = function(keySKU, lines) {
    var line = lines[0];
    for (var idx = 1; idx < lines.length; idx++) {
        if (lines[idx].badStations.length > 0) {
            line.badStations.push(lines[idx].badStations[0]);
            if (line.update < lines[idx].badStations[0].update) {
                line.update = lines[idx].badStations[0].update;
            }
        }
        if (lines[idx].goodStations.length > 0) {
            line.goodStations.push(lines[idx].goodStations[0]);
            if (line.update < lines[idx].goodStations[0].update) {
                line.update = lines[idx].goodStations[0].update;
            }
        }
    }
    return line;
};

db.stations.mapReduce(mapStationsToLines, reduceLines, {out: {replace: "lines"}})
db.lines.findOne({"value.id": "A"})
